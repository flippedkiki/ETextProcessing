# -*- coding: utf-8 -*-
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem.lancaster import LancasterStemmer
import os
import string

#数据准备
def data_preparation(Lclass_file,f):
    lines = [line.strip() for line in file(Lclass_file +'/' + str(f))]
    return lines

#单词小写化，分离标点符号和单词
def lAndTokenize(each_file):
    texts_tokenized = [[word.lower() for word in word_tokenize(document.decode('utf-8'))]for document in each_file]
    return texts_tokenized

#去停用词
def filtered_stopwords(texts_tokenized):
    texts_filtered_stopwords = [[word for word in document if not word in stopwords.words('english')] for document in texts_tokenized]
    return texts_filtered_stopwords

#去标点符号
def filtered_ptaAndDgs(texts_filtered_stopwords):
     delset = string.punctuation + string.digits
     texts_filtered = [[word.translate(None,delset) for word in document] for document in texts_filtered_stopwords]
     return texts_filtered

#单词词干化
def words_stemmed(texts_filtered):
    st = LancasterStemmer()
    texts_stemmed = [[st.stem(word) for word in docment] for docment in texts_filtered]
    return texts_stemmed

#处理低频词
def lowFrequencyWords_Processing(texts_stemmed):
    all_stems = sum(texts_stemmed, [])
    stems_once = set(stem for stem in set(all_stems) if all_stems.count(stem) == 1)
    texts = [[stem for stem in document if stem not in stems_once] for document in texts_stemmed]
    return texts

#单词词性标注
def POSTagger(texts):
    taggedLine=[[nltk.pos_tag(word) for word in document] for document in texts]
    return taggedLine

def main():
    Lclass_file = '/home/flipped/PycharmProjects/ETextProcessing/JanesNews'
    for f in os.listdir(Lclass_file):
        each_file = data_preparation(Lclass_file,f)
        texts_lAndTokenized = lAndTokenize(each_file)
        texts_filtered_stopwords = filtered_stopwords(texts_lAndTokenized)
        texts_filtered = filtered_stopwords(texts_filtered_stopwords)
        texts_stemmed = words_stemmed(texts_filtered)
        texts = lowFrequencyWords_Processing(texts_stemmed)
        taggedLine = POSTagger(texts)
        print taggedLine

if __name__ == '__main__':
    main()
